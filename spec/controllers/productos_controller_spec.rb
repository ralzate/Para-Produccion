# == Schema Information
#
# Table name: productos
#
#  id                  :integer          not null, primary key
#  nombre              :string
#  precio              :decimal(10, 2)
#  descripcion         :text
#  user_id             :integer
#  avatar_file_name    :string
#  avatar_content_type :string
#  avatar_file_size    :integer
#  avatar_updated_at   :datetime
#  created_at          :datetime         not null
#  updated_at          :datetime         not null
#

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProductosController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
      {
          nombre: "Producto primero",
          precio: 1.0
      }
  }

  let(:invalid_attributes) {
      {
          nombre: "",
          precio: 0
      }
  }

  describe "GET #index" do
    it "assigns all products as @productos" do
      producto = Producto.create! valid_attributes
      get :index, {}
      expect(assigns(:productos)).to eq([producto])
    end
  end

  describe "GET #show" do
    it "assigns the requested producto as @producto" do
      producto = Producto.create! valid_attributes
      get :show, {:id => producto.to_param}
      expect(assigns(:producto)).to eq(producto)
    end
  end

  describe "GET #new" do
    login_user
    it "assigns a new producto as @producto" do
      get :new, {}
      expect(assigns(:producto)).to be_a_new(Producto)
    end
  end

  describe "GET #edit" do
    login_user
    it "assigns the requested producto as @producto" do
      producto = Producto.create! valid_attributes
      get :edit, {:id => producto.to_param}
      expect(assigns(:producto)).to eq(producto)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      login_user
      it "creates a new Producto" do
        expect {
          post :create, {:producto => valid_attributes}
        }.to change(Producto, :count).by(1)
      end

      it "assigns a newly created producto as @producto" do
        post :create, {:producto => valid_attributes}
        expect(assigns(:producto)).to be_a(Producto)
        expect(assigns(:producto)).to be_persisted
      end

      it "redirects to the created producto" do
        post :create, {:producto => valid_attributes}
        expect(response).to redirect_to(Producto.last)
      end
    end

    context "with invalid params" do
      login_user
      it "assigns a newly created but unsaved product as @producto" do
        post :create, {:producto => invalid_attributes}
        expect(assigns(:producto)).to be_a_new(Producto)
      end

      it "re-renders the 'new' template" do
        post :create, {:producto => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
    context "without session" do
        it "redirects to the login page" do
            post :create, { :producto => valid_attributes }
            expect(response).to redirect_to(new_user_session_path)
        end
    end
  end

  describe "PUT #update" do
    login_user
    context "with valid params" do
      let(:new_attributes) {
          {
              nombre: "Actualizado"
          }
      }

      it "updates the requested producto" do
        producto = Producto.create! valid_attributes
        put :update, {:id => producto.to_param, :producto => new_attributes}
        producto.reload
        expect(producto.name).to eq("Actualizado")
      end

      it "assigns the requested producto as @producto" do
        producto = Producto.create! valid_attributes
        put :update, {:id => producto.to_param, :producto => valid_attributes}
        expect(assigns(:producto)).to eq(producto)
      end

      it "redirects to the producto" do
        producto = Producto.create! valid_attributes
        put :update, {:id => producto.to_param, :producto => valid_attributes}
        expect(response).to redirect_to(producto)
      end
    end

    context "with invalid params" do
      it "assigns the producto as @producto" do
        producto = Producto.create! valid_attributes
        put :update, {:id => producto.to_param, :producto => invalid_attributes}
        expect(assigns(:producto)).to eq(producto)
      end

      it "re-renders the 'edit' template" do
        producto = Producto.create! valid_attributes
        put :update, {:id => producto.to_param, :producto => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    login_user
    it "destroys the requested producto" do
      producto = Producto.create! valid_attributes
      expect {
        delete :destroy, {:id => producto.to_param}
      }.to change(Product, :count).by(-1)
    end

    it "redirects to the products list" do
      producto = Producto.create! valid_attributes
      delete :destroy, {:id => producto.to_param}
      expect(response).to redirect_to(products_url)
    end
  end

end
